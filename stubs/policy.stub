<?php

namespace {{ namespace }};

use Illuminate\Auth\Access\Response;
use {{ namespacedModel }};
use {{ namespacedUserModel }};
use App\Policies\Traits\Permission;
use Illuminate\Auth\Access\HandlesAuthorization;

class {{ class }}
{
    use HandlesAuthorization, Permission;

    /**
     * Determine whether the user can view any models.
     */
    public function viewAny({{ user }} $user): Response
    {
        return $this->permission($user, 'view any', {{ model }}::class);
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view({{ user }} $user, ${{ modelVariable }}): Response
    {
        return $this->permission($user, 'view', {{ model }}::class,[${{ modelVariable }}]);
    }

    /**
     * Determine whether the user can create models.
     */
    public function create({{ user }} $user): Response
    {
        return $this->permission($user, 'create', {{ model }}::class);
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update({{ user }} $user, ${{ modelVariable }}): Response
    {
        return $this->permission($user, 'update', {{ model }}::class,[${{ modelVariable }}]);
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete({{ user }} $user, ${{ modelVariable }}): Response
    {
        return $this->permission($user, 'delete', {{ model }}::class,[${{ modelVariable }}]);
    }

    /**
     * Determine whether the user can restore the model.
     */
    public function restore({{ user }} $user, ${{ modelVariable }}): Response
    {
        return $this->permission($user, 'restore', {{ model }}::class,[${{ modelVariable }}]);
    }

    /**
     * Determine whether the user can permanently delete the model.
     */
    public function forceDelete({{ user }} $user, ${{ modelVariable }}): Response
    {
        return $this->permission($user, 'force delete', {{ model }}::class,[${{ modelVariable }}]);
    }
}
